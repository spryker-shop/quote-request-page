{% extends template('page-layout-customer', 'CustomerPage') %}

{% block breadcrumbs %}
    {% include molecule('breadcrumb') with {
        data: {
            steps: [
                {
                    label: 'customer.account' | trans,
                    url: path('customer/overview'),
                },
                {
                    label: 'quote_request_page.quote_request' | trans,
                    url: path('quote-request'),
                },
                {
                    label: 'quote_request_page.quote_request.create' | trans,
                },
            ],
        },
    } only %}
{% endblock %}

{% define data = {
    title: 'quote_request_page.quote_request' | trans,
    quoteRequestForm: _view.quoteRequestForm,
    quoteRequest: _view.quoteRequestForm.vars.value,
    latestVersion: _view.quoteRequestForm.vars.value.latestVersion,
    shipmentGroups: _view.shipmentGroups | default([]),
    shipmentTotal: _view.shipmentTotal,
} %}

{% set quote = data.latestVersion ? data.latestVersion.quote : null %}
{% set hasMultiShipments = data.shipmentGroups | length > 1 %}

{% block content %}

    {% if not quote or quote.items is empty %}
        <div class="box text-center">
            {% include atom('icon') with {
                modifiers: ['biggest'],
                class: 'text-alt',
                data: {
                    name: 'shopping-cart',
                },
            } only %}
            <h6>{{ 'cart.empty' | trans }}</h6>
        </div>
    {% else %}

        {{ form_start(data.quoteRequestForm) }}

        <div class="grid">
            <div class="col col--sm-12 col--xl-8">
                <div class="box">
                    {% for child in data.quoteRequestForm.latestVersion.metadata %}
                        <div class="col col--sm-12 col--xl-6">
                            <div class="box">
                                {{ form_row(child) }}
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>

            <div class="col col--sm-12 col--xl-4">
                <div class="box">
                    <p>{{ 'quote_request_page.quote_request.labels.date' | trans }}: <b>{{ data.quoteRequestForm.vars.value.createdAt | formatDateTime }}</b></p>
                    <p>{{ 'quote_request_page.quote_request.labels.status' | trans }}:</p>
                    <p>{{ 'quote_request_page.quote_request.labels.valid_till' | trans }}:</p>
                    <p>{{ 'quote_request_page.quote_request.labels.history' | trans }}:
                    </p>
                </div>
            </div>
        </div>
        <div class="grid">
            <div class="col col--sm-12 col--xl-8">
                {% if quote and quote.priceMode is not empty %}
                    <div class="box">
                        {% include molecule('price-mode') with {
                            data: {
                                priceMode: quote.priceMode,
                            },
                        } only %}
                    </div>
                {% endif %}

                {% if hasMultiShipments %}
                    {% for shipmentGroup in data.shipmentGroups %}
                        <div class="grid grid--stretch grid--justify">
                            <div class="col col--sm-12 col--lg-12">
                                <div class="box">
                                    <h4>{{ 'quote_request_page.quote_request.shipment_counter' | trans({
                                            '%index%': loop.index,
                                            '%length%': data.shipmentGroups | length,
                                        }) }}</h4>
                                    <hr>
                                    <h6><strong>{{ 'checkout.step.summary.products' | trans }}</strong></h6>

                                    {% widget 'QuoteConfiguredBundleWidget' args [quote, shipmentGroup.items] with {
                                        data: {
                                            isEditable: false,
                                            isQuantitySummaryVisible: true,
                                        },
                                    } only %}
                                    {% endwidget %}

                                    {% set cartItems = shipmentGroup.items | filter(item => item.configuredBundleItem is not defined or item.configuredBundleItem is empty) %}
                                    {% for cartItem in cartItems %}
                                        {% embed molecule('product-cart-item', 'CartPage') ignore missing with {
                                            data: {
                                                product: cartItem,
                                            },
                                            embed: {
                                                priceMode: quote.priceMode,
                                                currency: quote.currency,
                                            },
                                        } only %}
                                            {% block additionalInformation %}
                                                {% include molecule('quote-request-item-summary', 'QuoteRequestPage') with {
                                                    data: {
                                                        priceMode: embed.priceMode,
                                                        unitPrice: data.product.unitPrice | money(true, embed.currency.code),
                                                        subtotalPrice: data.product.sumSubtotalAggregation | money(true, embed.currency.code),
                                                        cartItem: data.product,
                                                        currency: embed.currency,
                                                    },
                                                } only %}
                                            {% endblock %}

                                            {% block actions %}
                                                {% if data.product.amountSalesUnit is empty %}
                                                    {{ 'cart.item_quantity' | trans }}:
                                                    <strong>{{ data.product.quantity }}</strong>

                                                    {% if data.product.quantitySalesUnit %}
                                                        {% set value = data.product.quantitySalesUnit.value %}
                                                        {% set precision = data.product.quantitySalesUnit.precision %}
                                                        {% set salesUnitName = data.product.quantitySalesUnit.productMeasurementUnit.name | default('') %}

                                                        <p>
                                                            <small class="text-secondary">
                                                                [= {{ value / precision }} {{ salesUnitName | trans }}]
                                                            </small>
                                                        </p>
                                                    {% endif %}
                                                {% endif %}
                                            {% endblock %}
                                        {% endembed %}
                                    {% endfor %}

                                    {% include molecule('quote-request-shipment-information', 'QuoteRequestPage') with {
                                        data: {
                                            shipment: shipmentGroup.shipment,
                                            showAddress: true,
                                        },
                                    } only %}
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    {% widget 'QuoteConfiguredBundleWidget' args [quote] with {
                        data: {
                            isEditable: false,
                        },
                    } only %}
                    {% endwidget %}

                    {% set cartItems = quote.items | filter(item => item.configuredBundleItem is not defined or item.configuredBundleItem is empty) %}
                    {% for cartItem in cartItems %}
                        {% embed molecule('product-cart-item', 'CartPage') ignore missing with {
                            data: {
                                product: cartItem,
                            },
                            embed: {
                                priceMode: quote.priceMode,
                                currency: quote.currency,
                            },
                        } only %}
                            {% block additionalInformation %}
                                {% include molecule('quote-request-item-summary', 'QuoteRequestPage') with {
                                    data: {
                                        priceMode: embed.priceMode,
                                        unitPrice: data.product.unitPrice | money(true, embed.currency.code),
                                        subtotalPrice: data.product.sumSubtotalAggregation | money(true, embed.currency.code),
                                        cartItem: data.product,
                                        currency: embed.currency,
                                    },
                                } only %}
                            {% endblock %}

                            {% block actions %}
                                {% if data.product.amountSalesUnit is empty %}
                                    {{ 'cart.item_quantity' | trans }}:
                                    <strong>{{ data.product.quantity }}</strong>

                                    {% if data.product.quantitySalesUnit %}
                                        {% set value = data.product.quantitySalesUnit.value %}
                                        {% set precision = data.product.quantitySalesUnit.precision %}
                                        {% set salesUnitName = data.product.quantitySalesUnit.productMeasurementUnit.name | default('') %}

                                        <p>
                                            <small class="text-secondary">
                                                [= {{ value / precision }} {{ salesUnitName | trans }}]
                                            </small>
                                        </p>
                                    {% endif %}
                                {% endif %}
                            {% endblock %}
                        {% endembed %}
                    {% endfor %}

                    <h4 class="spacing-x spacing-top spacing-top--big">{{ 'quote_request_page.quote_request.title_shipment_method' | trans }}</h4>
                    {% include molecule('quote-request-shipment-information', 'QuoteRequestPage') with {
                        data: {
                            shipment: quote.shipment,
                        },
                    } only %}
                {% endif %}
            </div>

            <div class="col col--sm-12 col--xl-4">
                {% include molecule('quote-request-delivery-summary', 'QuoteRequestPage') with {
                    class: 'list spacing-y',
                    data: {
                        quote: quote,
                        hasMultiShipments: hasMultiShipments,
                    }
                } only %}

                <div class="box">
                    {% include molecule('quote-request-cart-summary', 'QuoteRequestPage') with {
                        data: {
                            cart: quote,
                            shipmentGroups: data.shipmentGroups,
                            shipmentTotal: data.shipmentTotal,
                        },
                    } only %}
                </div>
                <div class="box spacing-top spacing-top--big">
                    <a class="button button--expand button--cancel" href="{{ url('cart') }}">
                        {{ 'quote_request_page.quote_request.actions.cancel' | trans }}
                    </a>
                    <hr class="box__separator">
                    <button type="submit" class="button button--expand button--success">
                        {{ 'quote_request_page.quote_request.submit' | trans }}
                    </button>
                </div>
            </div>
        </div>

        {{ form_end(data.quoteRequestForm) }}

    {% endif %}
{% endblock %}
