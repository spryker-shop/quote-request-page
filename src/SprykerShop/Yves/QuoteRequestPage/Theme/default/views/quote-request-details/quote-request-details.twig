{% extends template('page-layout-customer', 'CustomerPage') %}

{% define data = {
    title: 'quote_request_page.quote_request' | trans,
    quoteRequest: _view.quoteRequest,
    quoteRequestVersionReferences: _view.quoteRequestVersionReferences,
    version: _view.version,
    isQuoteRequestCancelable: _view.isQuoteRequestCancelable,
    isQuoteRequestReady: _view.isQuoteRequestReady,
    isQuoteRequestEditable: _view.isQuoteRequestEditable,
    shipmentGroups: _view.shipmentGroups | default([]),
    totalShippingCosts: _view.totalShippingCosts,
} %}

{% set isLatestVersion = (data.version.idQuoteRequestVersion == data.quoteRequest.latestVisibleVersion.idQuoteRequestVersion) ? true : false %}
{% set quote = data.version.quote %}
{% set hasMultiShipments = data.shipmentGroups | length > 1 %}

{% block breadcrumbs %}
    {% include molecule('breadcrumb') with {
        data: {
            steps: [
                {
                    label: 'customer.account' | trans,
                    url: path('customer/overview'),
                },
                {
                    label: 'quote_request_page.quote_request' | trans,
                    url: path('quote-request')
                },
                {
                    label: '#' ~ data.quoteRequest.quoteRequestReference,
                },
            ],
        },
    } only %}
{% endblock %}

{% block content %}

    <div class="grid">
        <div class="col col--sm-12 col--xl-8">
            <div class="box">
                {% for key, value in data.version.metadata %}
                    <div class="col col--sm-12 col--xl-6">
                        <div class="box">
                            <label class="label">{{ ('quote_request_page.quote_request.metadata.label.' ~ key) | trans }}</label>
                            <hr class="box__separator">
                            <p class="text-break">{{ value }}</p>
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>

        <div class="col col--sm-12 col--xl-4">
            <div class="box">
                <h6>{{ "quote_request_page.quote_request.labels.information" | trans }}</h6>
                <hr class="box__separator">
                <p>{{ 'quote_request_page.quote_request.labels.date' | trans }}:
                    <b>{{ data.quoteRequest.createdAt | formatDateTime }}</b>
                </p>
                <p>{{ 'quote_request_page.quote_request.labels.status' | trans }}:
                    <span class="request-status request-status--{{ data.quoteRequest.status }}">{{ ('quote_request.status.' ~ data.quoteRequest.status) | trans }}</span>
                </p>
                {% if data.quoteRequest.validUntil %}
                    <p>{{ 'quote_request_page.quote_request.labels.valid_till' | trans }}:
                        <b>{{ data.quoteRequest.validUntil | formatDateTime }}</b>
                    </p>
                {% endif %}
                <hr class="box__separator">
                <h6>{{ "quote_request_page.quote_request.labels.version_information" | trans }}</h6>
                <hr class="box__separator">
                <p>{{ 'quote_request_page.quote_request.labels.history' | trans }}:
                    {% embed atom('select') with {
                        modifiers: ['naked'],
                        attributes: {
                            name: 'quote-request-versions',
                            onchange: 'this.options[this.selectedIndex].value && (window.location.search = "quote-request-version-reference=" + this.options[this.selectedIndex].value);',
                        },
                        embed: {
                            versionReferences: data.quoteRequestVersionReferences,
                            currentVersionReference: data.version ? data.version.versionReference : null,
                        },
                    } only %}
                        {% block options %}
                            {% for versionReference in embed.versionReferences %}
                                <option value="{{ versionReference }}" {{ (versionReference == embed.currentVersionReference) ? 'selected'}}>{{ versionReference }}</option>
                            {% endfor %}
                        {% endblock %}
                    {% endembed %}
                </p>
            </div>
        </div>
    </div>
    <div class="grid">
        <div class="col col--sm-12 col--xl-8">
            {% if quote and quote.priceMode is not empty %}
                <div class="box">
                    {% include molecule('price-mode') with {
                        data: {
                            priceMode: quote.priceMode,
                        },
                    } only %}
                </div>
            {% endif %}

            {% if hasMultiShipments %}
                {% for shipmentGroup in data.shipmentGroups %}
                    <div class="grid grid--stretch grid--justify">
                        <div class="col col--sm-12 col--lg-12">
                            <div class="box">
                                <h4>{{ 'checkout.step.shipment.title' | trans }} n&#176;{{ loop.index }}</h4>
                                <hr>
                                <h6><strong>{{ 'checkout.step.summary.products' | trans }}</strong></h6>

                                {% widget 'QuoteConfiguredBundleWidget' args [quote, shipmentGroup.items] with {
                                    data: {
                                        isEditable: false,
                                        isQuantitySummaryVisible: true,
                                    },
                                } only %}
                                {% endwidget %}

                                {% for item in shipmentGroup.items %}
                                    {% set cartItem = item.bundleProduct ?? item %}
                                    {% set isConfiguredBundle = cartItem.configuredBundleItem is defined and cartItem.configuredBundleItem is not empty %}
                                    {% set isGiftCardExists = cartItem.giftCardMetadata is not null and cartItem.giftCardMetadata.isGiftCard %}

                                    {% if not isConfiguredBundle %}
                                        {% embed molecule('summary-node', 'CheckoutPage') with {
                                            data: {
                                                node: cartItem,
                                                bundleItems: item.bundleItems | default([]),
                                            },
                                        } only %}
                                            {% block body %}
                                                {{ parent() }}

                                                {% if data.node.cartNote %}
                                                    {% include molecule('note-list', 'CartNoteWidget') ignore missing with {
                                                        data: {
                                                            label: 'cart_note.checkout_page.item_note',
                                                            note: data.node.cartNote,
                                                        },
                                                    } only %}
                                                {% endif %}
                                            {% endblock %}
                                        {% endembed %}

                                        {% if not loop.last %}<hr>{% endif %}
                                    {% endif %}
                                {% endfor %}
                            </div>
                        </div>

                        {% include molecule('quote-request-shipment-group', 'QuoteRequestPage') ignore missing with {
                            class: 'list spacing-y',
                            data: {
                                shipmentGroup: shipmentGroup,
                            }
                        } only %}
                    </div>
                {% endfor %}
            {% else %}

                {% widget 'QuoteConfiguredBundleWidget' args [quote] with {
                    data: {
                        isEditable: false,
                    },
                } only %}
                {% endwidget %}

                {% set cartItems = quote.items | filter(item => item.configuredBundleItem is not defined or item.configuredBundleItem is empty) %}
                {% for cartItem in cartItems %}
                    {% embed molecule('product-cart-item', 'CartPage') ignore missing with {
                        data: {
                            product: cartItem,
                        },
                        embed: {
                            priceMode: quote.priceMode,
                            currency: quote.currency,
                        },
                    } only %}
                        {% block additionalInformation %}
                            {% include molecule('quote-request-item-summary', 'QuoteRequestPage') with {
                                data: {
                                    priceMode: embed.priceMode,
                                    unitPrice: data.product.unitPrice | money(true, embed.currency.code),
                                    subtotalPrice: data.product.sumSubtotalAggregation | money(true, embed.currency.code),
                                    cartItem: data.product,
                                    currency: embed.currency,
                                },
                            } only %}
                        {% endblock %}

                        {% block actions %}
                            {% if data.product.amountSalesUnit is empty %}
                                {{ 'cart.item_quantity' | trans }}:
                                <strong>{{ data.product.quantity }}</strong>

                                {% if data.product.quantitySalesUnit %}
                                    {% set value = data.product.quantitySalesUnit.value %}
                                    {% set precision = data.product.quantitySalesUnit.precision %}
                                    {% set salesUnitName = data.product.quantitySalesUnit.productMeasurementUnit.name | default('') %}

                                    <p>
                                        <small class="text-secondary">
                                            [= {{ value / precision }} {{ salesUnitName | trans }}]
                                        </small>
                                    </p>
                                {% endif %}
                            {% endif %}
                        {% endblock %}
                    {% endembed %}
                {% endfor %}
            {% endif %}
        </div>

        <div class="col col--sm-12 col--xl-4">
            {% if quote.items is not empty %}

                {% include molecule('quote-request-delivery-summary', 'QuoteRequestPage') ignore missing with {
                    class: 'list spacing-y',
                    data: {
                        quote: quote,
                        hasMultiShipments: hasMultiShipments,
                    }
                } only %}

                <div class="box">
                    {% include molecule('quote-request-cart-summary', 'QuoteRequestPage') with {
                        data: {
                            cart: quote,
                            shipmentGroups: data.shipmentGroups,
                            totalShippingCosts: data.totalShippingCosts,
                        },
                    } only %}
                </div>
            {% endif %}
            <div class="box">
                <a class="button button--expand button--hollow" href="{{ url('quote-request') }}">
                    {{ 'quote_request_page.quote_request.actions.back_to_list' | trans }}
                </a>

                {% if data.version and data.version.idQuoteRequestVersion == data.quoteRequest.latestVisibleVersion.idQuoteRequestVersion %}

                    {% if data.isQuoteRequestCancelable %}
                        <hr class="box__separator">
                        <a class="button button--expand button--cancel"
                           href="{{ path('quote-request/cancel', { quoteRequestReference: (data.quoteRequest.quoteRequestReference) }) }}" data-init-single-click>
                            {{ 'quote_request_page.quote_request.actions.cancel' | trans }}
                        </a>
                    {% endif %}

                    {% if data.isQuoteRequestReady %}
                        <hr class="box__separator">
                        <a class="button button--expand button--hollow"
                           href="{{ path('quote-request/revise', { quoteRequestReference: (data.quoteRequest.quoteRequestReference) }) }}" data-init-single-click>
                            {{ 'quote_request_page.quote_request.actions.revise' | trans }}
                        </a>
                        <hr class="box__separator">
                        <a class="button button--expand button--success"
                           href="{{ path('quote-request/convert-to-cart', { quoteRequestReference: (data.quoteRequest.quoteRequestReference) }) }}" data-init-single-click>
                            {{ 'quote_request_page.quote_request.actions.convert_to_cart' | trans }}
                        </a>
                    {% endif %}

                    {% if data.isQuoteRequestEditable %}
                        <hr class="box__separator">
                        <a class="button button--expand button--success"
                           href="{{ path('quote-request/edit', { quoteRequestReference: (data.quoteRequest.quoteRequestReference) }) }}" data-init-single-click>
                            {{ 'quote_request_page.quote_request.actions.edit' | trans }}
                        </a>
                        <hr class="box__separator">
                        <a class="button button--expand button--success"
                           href="{{ path('quote-request/send-to-user', { quoteRequestReference: (data.quoteRequest.quoteRequestReference) }) }}" data-init-single-click>
                            {{ 'quote_request_page.quote_request.actions.send_to_agent' | trans }}
                        </a>
                    {% endif %}

                {% endif %}
            </div>
        </div>
    </div>

{% endblock %}
